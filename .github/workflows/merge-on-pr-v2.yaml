name: Merge PR with main branch

# 포크에서 PR이 오거나 업데이트될 때
on:
  pull_request_target:
    # 다음의 경우에만 실행
    types:
      - opened        # PR이 open 될 때
      - synchronize   # PR에 commit 추가시
    # PR의 base(refs/heads/…)가 다음 브랜치에 해당할 때만 실행
    branches:
      - main
    # 특정 디렉토리 내에서, 그리고 Markdown 파일과 이미지 파일에 대한 변경사항만 트리거
    paths:
      - '!.github/**'
      - '**.md'
      - '**.png'
      - '**.jpg'
      - '**.jpeg'
      - '**.gif'
      - '**.tiff'
      - '**.raw'
      - '**.psd'
      - '**.pdf'
      - '**.eps'
      - '**.ai'
      - '**.svg'

# GitHub_Token에 write 권한 부여
permissions:
  contents: write

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:

      # 1) 전체 커밋 히스토리를 가져오기 위해 depth=0
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) PR 머지를 위한 head 커밋을 별도의 임시 브랜치(pr-<번호>)로 Fetch
      - name: Fetch PR head to temporary branch
        run: |
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-${{ github.event.pull_request.number }}

      # 3) 원격 main을 최신으로 당겨와 로컬 main 브랜치에 반영하고 로컬 main 브랜치로 이동
      - name: Update local main to match origin/main
        run: |
          git fetch origin main:main
          git checkout main

      # 4) 로컬 main 위에 PR head를 머지 (non-ff)
      - name: Merge PR into main
        run: |
          git merge --no-ff pr-${{ github.event.pull_request.number }} \
            -m "Merge PR #${{ github.event.pull_request.number }}"

      # 5) 충돌이 없으면 origin/main에 안전하게 푸시
      - name: Push merged main back to origin
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUBAPI_ACCESS_TOKEN }}
        run: |
          git push origin main