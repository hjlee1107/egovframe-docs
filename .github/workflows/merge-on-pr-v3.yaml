# name: Merge PR with main branch

# 포크에서 PR이 오거나 업데이트될 때
# on:
  pull_request_target:
    # 다음의 경우에만 실행
    types:
      - opened        # PR이 open 될 때
      - synchronize   # PR에 commit 추가시
    # PR의 base(refs/heads/…)가 다음 브랜치에 해당할 때만 실행
    branches:
      - main
    # 특정 디렉토리 내에서, 그리고 Markdown 파일과 이미지 파일에 대한 변경사항만 트리거
    paths:
      - '!.github/**'
      - '**.md'
      - '**.png'
      - '**.jpg'
      - '**.jpeg'
      - '**.gif'
      - '**.tiff'
      - '**.raw'
      - '**.psd'
      - '**.pdf'
      - '**.eps'
      - '**.ai'
      - '**.svg'

# GitHub_Token에 write 권한 부여
permissions:
  contents: write

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:

      # 1) 전체 히스토리(fetch-depth: 0)와 토큰 유지(persist-credentials: true)로 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) origin/main 을 최신 상태로 업데이트
      - name: Fetch latest origin/main
        run: |
          git fetch origin main


      # 3) PR 번호에 해당하는 merge-commit(refs/pull/.../merge)을 가져와서 로컬 브랜치(name = pr_merge)로 받아 놓기
      #   - refs/pull/<N>/merge 은 GitHub가 PR head 와 base 를 미리 합친(merge) 가상의 커밋
      #   - 참고) GitHub는 PR이 열려 있는 동안 내부적으로 PR의 head 브랜치와 base 브랜치를 미리 합친 상태의 커밋을 refs/pull/<number>/merge 라는 이름으로 계속 관리
      - name: Fetch PR merge commit
        run: |
          git fetch origin pull/${{ github.event.pull_request.number }}/merge:pr_merge

      # 4) merge-commit을 받아 놓은 pr_merge 브랜치를 main 브랜치로 푸시 (=자동 머지)
      - name: Push merge commit to main
        run: |
          git push origin pr_merge:main